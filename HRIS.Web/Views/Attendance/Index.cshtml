@using HRIS.Model.Sys;
@using HRIS.Model.Attendance;
@using HRIS.Service.Attendance;
@{

    ViewBag.Title = "Employee Time and Attendance";

    var deviceAttendanceService = DependencyResolver.Current.GetService<IDeviceAttendanceService>();
    var devices = deviceAttendanceService.GetQuery().Select(x => new ReferenceModel() { value = x.id.Value, description = x.description }).ToList();

}

@section bottom{
    <script type="text/javascript">

        $(function () {
            checkDeviceInUse();
        })

        function getParam() {
            return {
                employeeId: $("#employee").data("kendoDropDownList").value(),
                startDate: $("#startDate").data("kendoDateTimePicker").value(),
                endDate: $("#endDate").data("kendoDateTimePicker").value(),
                deviceId: $("#device").data("kendoDropDownList").value()
            }
        }

        function refreshGrid() {
            var grd = $("#grdAttendance").data("kendoGrid");
            grd.dataSource.read(getParam);
        }

        function saveManualTimeLog() {
            var form = $("#frmManualAttendance");

            if (form.valid()) {
                form.ajaxSubmit({
                    success: function (result) {
                        HRIS.showAjaxResult(result);
                        if (result.success) {
                            $("#winManualTimeLog").data("kendoWindow").close();
                        }
                    }
                });
            }
        }

        function downloadDeviceLogs() {
            $("#winImportTimeLog").data("kendoWindow").open();
            checkDeviceStatus($("#deviceId").data("kendoDropDownList").value());
        }

        function deviceIdOnChange(e) {
            var index = this.selectedIndex, dataItem;
            if (this.options.optionLabel && index > 0) {
                index = index - 1;
            }
            var dataItem = this.dataItem(e.item);
            checkDeviceStatus(dataItem.value);
        }

        function checkDeviceStatus(deviceId) {
            $("div.import-logs button").attr("disabled", "disabled");
            $("div.biometric-note").html("");

            if (deviceId == "" || deviceId == undefined || deviceId == null) {
                return;
            }
            $.ajax({
                url: "@Url.Action("CheckDeviceStatus")/" + deviceId,
                success: function (result) {
                    if (result.success) {
                        if (result.inUse) {
                            $("div.import-logs button").attr("disabled", "disabled");
                            $("div.biometric-note").html("<p><strong>Selected Device is currently in use... Try again later...</strong></p>");
                        }
                        else {
                            $("div.import-logs button").removeAttr("disabled");
                        }
                    }
                    else {
                        swal("Device", result.msg, "Error");
                    }
                }
            });
        }

        function startImportAttendance() {
            var deviceId = $("#downloadDeviceId").data("kendoDropDownList").value();
            //console.log(deviceId);
            $("div.import-logs button").attr("disabled", "disabled");

            if (deviceId == "" || deviceId == undefined || deviceId == null) {
                return;
            }
            swal("Device", "Importing time logs has been in progress.", "success");
            $("#winImportTimeLog").data("kendoWindow").close();
            $.ajax({
                url: "@Url.Action("StartImportAttendance")/" + deviceId,
                success: function (result) {
                    if (result.success) {
                        swal("Device", "Importing time logs is done.", "success");
                    }
                    else {
                        swal("Device", result.msg, "error");
                    }
                }
            });
        }

        function newManualTimeLog() {
            $("#winManualTimeLog").data("kendoWindow").open();
        }

        function checkDeviceInUse(repeat) {
            $("div.device-in-use").load("@Url.Action("_DeviceInUse")", null, function () {
                if (repeat == undefined || repeat == true) {
                    setTimeout(function () {
                        checkDeviceInUse();
                    }, 5000);
                }
            });
        }
    </script>
}

@Html.AdminHeader((string)ViewBag.Title, @<text>
        <button type="button" class="k-button pull-right" onclick="newManualTimeLog()">Add Missing Time Logs</button>
        <button type="button" class="k-button pull-right hris-margin-right-5" onclick="downloadDeviceLogs()">Download Logs</button>
</text>)
<div class="col-md-12 device-in-use">
</div>
<div class="col-md-12">
    <div class="form-horizontal" role="form">
        <div class="form-group">
            <label class="control-label col-md-2" for="endDate">Biometric Device</label>
            <div class="col-md-4">
                @Html.Kendo().DropDownList().Name("device").SetReferenceSettings().BindTo(devices).OptionLabel("All Biometric Devices")
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2" for="startDate">Start Date</label>
            <div class="col-md-4">
                @Html.Kendo().DateTimePicker().Name("startDate").Value(DateTime.Now.Date).Events(events => events.Change("refreshGrid"))
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2" for="endDate">End Date</label>
            <div class="col-md-4">
                @Html.Kendo().DateTimePicker().Name("endDate").Value(DateTime.Now.Date).Events(events => events.Change("refreshGrid"))
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="employee">Employee</label>
            <div class="col-md-4">
                @{

                    Html.Kendo().DropDownList().Name("employee")
                        .DataSource(source =>
                        {
                            source.Custom().Type("aspnetmvc-ajax").ServerFiltering(true)
                                .Transport(transport =>
                                {
                                    transport.Read(read =>
                                    {
                                        read.Action("GetEmployeeAll", "Employee");
                                    });
                                })
                                .Schema(schema =>
                                {
                                    schema.Data("Data").Total("Total");
                                });
                        })
                        .Filter(FilterType.Contains)
                        .DataValueField("id")
                        .DataTextField("name")
                        .TemplateId("dropdownEmployeeTemplate")
                        .ValueTemplateId("dropdownEmployeeValueTemplate")
                        .OptionLabel("select")
                        .Events(events => events.Change("refreshGrid"))
                        .Render();

                }
                <span class="help-block">Select Employee that you want to view attendance</span>
            </div>
        </div>
        <div class="form-group">
            @{
                Html.Kendo().Grid<EmployeeAttendanceModel>()
                    .Name("grdAttendance")
                    .Columns(col =>
                    {
                        col.Bound(x => x.device).Width(150);
                        col.Bound(x => x.employeeName);
                        col.Bound(x => x.workDate).Width(150);
                        col.Bound(x => x.timeLog).Width(150);
                        col.Bound(x => x.timeLogType).Width(150).ClientTemplate("#= timeLogType.description #");
                    })
                    .SetDefaultSettings()
                    .DataSource(source =>
                    {
                        source
                            .Ajax()
                            .Read(read => read.Action("GetEmployeeAttendance", "Attendance").Data("getParam"));
                    })
                    .Render();
            }
        </div>
    </div>
</div>

<script id="dropdownEmployeeTemplate" type="text/x-kendo-template">
    <span class="k-state-default"><strong>#: data.employeeCode + ' - ' + data.name #</strong></span>
    <br />
    <span class="k-state-default">#: data.department + ' / ' + data.position #</span>
</script>

<script id="dropdownEmployeeValueTemplate" type="text/x-kendo-template">
    <span class="selected-value">#: data.employeeCode + ' - ' + data.name #</span>
</script>

@{

    Html.Kendo()
        .Window()
        .Name("winManualTimeLog")
        .Title("Manual Time Log")
        .Width(600)
        .LoadContentFrom("_ManualTimeLog", "Attendance")
        .Modal(true)
        .Events(events => events.Open("HRIS.centerKendoWindow"))
        .Draggable()
        .Visible(false)
        .Render();

    Html.Kendo()
        .Window()
        .Name("winImportTimeLog")
        .Title("Import Time Logs")
        .Width(600)
        .Content(@<text>
            <div class="col-md-12">
                <div class="form-horizontal import-logs">
                    <div class="form-group">
                        <label class="control-label col-md-3" for="endDate">Biometric Device</label>
                        <div class="col-md-9">
                            @Html.Kendo().DropDownList().Name("downloadDeviceId").Events(events => events.Change("deviceIdOnChange")).SetReferenceSettings().BindTo(devices.ToList()).OptionLabel("select Biometric Device")
                            <div class="help-block">
                                Once you start to Import, the device will be disabled until importing is done.
                                <div class="biometric-note"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-3 col-md-9">
                            <button type="button" class="k-button" disabled="disabled" onclick="startImportAttendance()">Start Import</button>
                        </div>
                    </div>
                </div>
            </div>
        </text>)
        .Modal(true)
        .Events(events => events.Open("HRIS.centerKendoWindow"))
        .Draggable()
        .Visible(false)
        .Render();

}